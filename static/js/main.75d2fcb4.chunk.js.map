{"version":3,"sources":["components/FormikForm.js","App.js","reportWebVitals.js","index.js"],"names":["FormikForm","formik","useFormik","initialValues","emailField","pswField","onSubmit","values","alert","validate","errors","test","console","log","touched","className","handleSubmit","htmlFor","name","type","id","onChange","handleChange","value","onBlur","handleBlur","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAiEeA,MA9Df,WACI,IAAMC,EAASC,YAAU,CACrBC,cAAgB,CACZC,WAAa,iBACbC,SAAW,SAGfC,SAAW,SAAAC,GACPC,MAAM,qBAEVC,SAAW,SAAAF,GACP,IAAIG,EAAS,GASb,OARKH,EAAOH,WAEA,mDAAmDO,KAAKJ,EAAOH,cACvEM,EAAON,WAAa,+BAFpBM,EAAON,WAAa,iBAInBG,EAAOF,WACRK,EAAOL,SAAW,kBAEfK,KAMf,OAHAE,QAAQC,IAAI,eAAeZ,EAAOM,QAClCK,QAAQC,IAAI,UAAWZ,EAAOS,QAC9BE,QAAQC,IAAI,WAAWZ,EAAOa,SAI1B,qBAAKC,UAAW,cAAhB,SACI,uBAAMT,SAAUL,EAAOe,aAAvB,UACI,sBAAKD,UAAY,eAAjB,UACI,uBAAOE,QAAQ,aAAf,sBACA,uBACAC,KAAK,aACLC,KAAK,QACLC,GAAG,aACHC,SAAUpB,EAAOqB,aACjBC,MAAOtB,EAAOM,OAAOH,WACrBoB,OAAQvB,EAAOwB,aACbxB,EAAOa,QAAQV,YAAcH,EAAOS,OAAON,WACxC,qBAAKgB,GAAG,aAAaL,UAAY,QAAjC,SAA0Cd,EAAOS,OAAON,aAAqB,QAEtF,sBAAKW,UAAY,eAAjB,UACI,uBAAOE,QAAQ,WAAf,wBACA,uBACAC,KAAK,WACLC,KAAK,OACLC,GAAG,WACHC,SAAUpB,EAAOqB,aACjBC,MAAOtB,EAAOM,OAAOF,SACrBmB,OAAQvB,EAAOwB,aACbxB,EAAOa,QAAQT,UAAYJ,EAAOS,OAAOL,SACtC,qBAAKe,GAAG,WAAWL,UAAY,QAA/B,SAAwCd,EAAOS,OAAOL,WAAmB,QAGlF,wBAASc,KAAK,SAASC,GAAG,YAA1B,4BC/CDM,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.75d2fcb4.chunk.js","sourcesContent":["import react from 'react'\nimport { useFormik } from 'formik'\n\nfunction FormikForm(){\n    const formik = useFormik({\n        initialValues : {\n            emailField : 'vani@gamil.com',\n            pswField : 'asera'\n        \n        },\n        onSubmit : values => {\n            alert(\"Login successful\");\n        },\n        validate : values => {\n            let errors = {}\n            if (!values.emailField){\n                errors.emailField = 'Field required'\n            } else if (!/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/i.test(values.emailField)){\n                errors.emailField = 'Username should be an email'\n            }\n            if (!values.pswField){\n                errors.pswField = 'Field required'\n            }\n            return errors;\n        }\n    });\n    console.log(\"Form values:\",formik.values)\n    console.log(\"Errors:\", formik.errors)\n    console.log(\"visited:\",formik.touched)\n    return(\n\n    \n        <div className= 'form-border'>\n            <form onSubmit={formik.handleSubmit}>\n                <div className = 'form-control'>\n                    <label htmlFor='emailField' >E-mail :</label>\n                    <input \n                    name='emailField' \n                    type='email' \n                    id='emailField' \n                    onChange={formik.handleChange} \n                    value={formik.values.emailField} \n                    onBlur={formik.handleBlur}/>\n                    {(formik.touched.emailField && formik.errors.emailField) ? \n                        (<div id='emailError' className = 'error'>{formik.errors.emailField}</div>) : null }\n                </div>\n                <div className = 'form-control'>\n                    <label htmlFor='pswField'>Password :</label>\n                    <input \n                    name='pswField' \n                    type='text' \n                    id='pswField' \n                    onChange={formik.handleChange} \n                    value={formik.values.pswField} \n                    onBlur={formik.handleBlur}/>\n                    {(formik.touched.pswField && formik.errors.pswField) ? \n                        (<div id='pswError' className = 'error'>{formik.errors.pswField}</div>) : null }\n                </div>\n                \n                <button  type='submit' id='submitBtn'> Submit </button>\n            </form>\n        </div>\n    )\n}\n\nexport default FormikForm","import react from 'react'\nimport './App.css';\nimport FormikForm from './components/FormikForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormikForm />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}